{"version":3,"file":"bulk_actions.min.js","sources":["../src/bulk_actions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Add bulk actions to the orphaned report.\n *\n * @package\n * @author    Simon Thornett <simon.thornett@catalyst-eu.net>\n * @copyright Catalyst IT, 2025\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as reportSelectors from 'core_reportbuilder/local/selectors';\nimport * as tableEvents from 'core_table/local/dynamic/events';\nimport * as FormChangeChecker from 'core_form/changechecker';\nimport * as CustomEvents from 'core/custom_interaction_events';\nimport jQuery from 'jquery';\n\nconst Selectors = {\n    bulkActionsForm: 'form#bulk-action-form',\n    reportWrapper: '[data-region=\"report-list-wrapper\"]',\n    checkbox: 'input[type=\"checkbox\"][data-togglegroup=\"report-select-all\"][data-toggle=\"slave\"]',\n    masterCheckbox: 'input[type=\"checkbox\"][data-togglegroup=\"report-select-all\"][data-toggle=\"master\"]',\n    checkedRows: '[data-togglegroup=\"report-select-all\"][data-toggle=\"slave\"]:checked',\n};\n\n/**\n * Initialise module\n */\nexport const init = () => {\n\n    const bulkForm = document.querySelector(Selectors.bulkActionsForm);\n    const report = bulkForm?.closest(Selectors.reportWrapper)?.querySelector(reportSelectors.regions.report);\n    if (!bulkForm || !report) {\n        return;\n    }\n    const actionSelect = bulkForm.querySelector('select');\n    CustomEvents.define(actionSelect, [CustomEvents.events.accessibleChange]);\n\n    jQuery(actionSelect).on(CustomEvents.events.accessibleChange, event => {\n        if (event.target.value && `${event.target.value}` !== \"0\") {\n            const e = new Event('submit', {cancelable: true});\n            bulkForm.dispatchEvent(e);\n            if (!e.defaultPrevented) {\n                FormChangeChecker.markFormSubmitted(bulkForm);\n                bulkForm.submit();\n            }\n        }\n    });\n\n    // Every time the checkboxes in the report are changed, update the list of ids in the form values\n    // and enable/disable the action select.\n    const updateIds = () => {\n        const selectedRows = [...report.querySelectorAll(Selectors.checkedRows)];\n        const selectedIds = selectedRows.map(check => parseInt(check.value));\n        bulkForm.querySelector('[name=\"recordids\"]').value = selectedIds.join(',');\n\n        // Disable the action selector if nothing selected, and reset the current selection.\n        actionSelect.disabled = selectedRows.length === 0;\n        if (actionSelect.disabled) {\n            actionSelect.value = \"0\";\n        }\n\n        // Add the idsto the form data attributes so they can be available from the\n        // other JS modules that listen to the form submit event.\n        bulkForm.data = {ids: selectedIds};\n    };\n\n    updateIds();\n\n    document.addEventListener('change', event => {\n        // When checkboxes are checked next to individual rows or the master toggle (Select all/none).\n        if ((event.target.matches(Selectors.checkbox) || event.target.matches(Selectors.masterCheckbox))\n                && report.contains(event.target)) {\n            updateIds();\n        }\n    });\n\n    document.addEventListener(tableEvents.tableContentRefreshed, event => {\n        // When the report contents is updated (i.e. page is changed, filters applied, etc).\n        if (report.contains(event.target)) {\n            updateIds();\n        }\n    });\n};\n"],"names":["Selectors","bulkForm","document","querySelector","report","closest","_bulkForm$closest","reportSelectors","regions","actionSelect","CustomEvents","define","events","accessibleChange","on","event","target","value","e","Event","cancelable","dispatchEvent","defaultPrevented","FormChangeChecker","markFormSubmitted","submit","updateIds","selectedRows","querySelectorAll","selectedIds","map","check","parseInt","join","disabled","length","data","ids","addEventListener","matches","contains","tableEvents","tableContentRefreshed"],"mappings":";;;;;;;;0WA8BMA,0BACe,wBADfA,wBAEa,sCAFbA,mBAGQ,oFAHRA,yBAIc,qFAJdA,sBAKW,oFAMG,iCAEVC,SAAWC,SAASC,cAAcH,2BAClCI,OAASH,MAAAA,oCAAAA,SAAUI,QAAQL,6DAAlBM,kBAA4CH,cAAcI,gBAAgBC,QAAQJ,YAC5FH,WAAaG,oBAGZK,aAAeR,SAASE,cAAc,UAC5CO,aAAaC,OAAOF,aAAc,CAACC,aAAaE,OAAOC,uCAEhDJ,cAAcK,GAAGJ,aAAaE,OAAOC,kBAAkBE,WACtDA,MAAMC,OAAOC,OAAqC,MAA5B,UAAGF,MAAMC,OAAOC,OAAiB,OACjDC,EAAI,IAAIC,MAAM,SAAU,CAACC,YAAY,IAC3CnB,SAASoB,cAAcH,GAClBA,EAAEI,mBACHC,kBAAkBC,kBAAkBvB,UACpCA,SAASwB,oBAOfC,UAAY,WACRC,aAAe,IAAIvB,OAAOwB,iBAAiB5B,wBAC3C6B,YAAcF,aAAaG,KAAIC,OAASC,SAASD,MAAMd,SAC7DhB,SAASE,cAAc,sBAAsBc,MAAQY,YAAYI,KAAK,KAGtExB,aAAayB,SAAmC,IAAxBP,aAAaQ,OACjC1B,aAAayB,WACbzB,aAAaQ,MAAQ,KAKzBhB,SAASmC,KAAO,CAACC,IAAKR,cAG1BH,YAEAxB,SAASoC,iBAAiB,UAAUvB,SAE3BA,MAAMC,OAAOuB,QAAQvC,qBAAuBe,MAAMC,OAAOuB,QAAQvC,4BAC3DI,OAAOoC,SAASzB,MAAMC,SAC7BU,eAIRxB,SAASoC,iBAAiBG,YAAYC,uBAAuB3B,QAErDX,OAAOoC,SAASzB,MAAMC,SACtBU"}